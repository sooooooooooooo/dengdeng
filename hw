{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Exercise 1: Subsets\n",
    "Let's practice pulling subsets out of a data frame. We subset a lot. Our goal is to build some muscle memory, so that every time we need to subset the data, we do not need to go look up how to do it. \n",
    "\n",
    "To this end, first try the exercises below without consulting your notes or the internet. Sort out where you need to improve and keep practicing! \n",
    "\n",
    "1. Create a DataFrame from the following dict. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>soda</th>\n",
       "      <th>cals</th>\n",
       "      <th>sodium</th>\n",
       "      <th>corp</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>coke</td>\n",
       "      <td>140</td>\n",
       "      <td>45</td>\n",
       "      <td>coca cola</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>diet coke</td>\n",
       "      <td>1</td>\n",
       "      <td>40</td>\n",
       "      <td>coca cola</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>sprite</td>\n",
       "      <td>90</td>\n",
       "      <td>65</td>\n",
       "      <td>coca cola</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>pepsi</td>\n",
       "      <td>150</td>\n",
       "      <td>30</td>\n",
       "      <td>pepsico</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>mug</td>\n",
       "      <td>130</td>\n",
       "      <td>65</td>\n",
       "      <td>pepsico</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>mt. dew</td>\n",
       "      <td>170</td>\n",
       "      <td>60</td>\n",
       "      <td>pepsico</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        soda  cals  sodium       corp\n",
       "0       coke   140      45  coca cola\n",
       "1  diet coke     1      40  coca cola\n",
       "2     sprite    90      65  coca cola\n",
       "3      pepsi   150      30    pepsico\n",
       "4        mug   130      65    pepsico\n",
       "5    mt. dew   170      60    pepsico"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "data_dict = {'soda':['coke', 'diet coke', 'sprite', 'pepsi', 'mug', 'mt. dew'],\n",
    "            'cals':[140, 1, 90, 150, 130, 170],\n",
    "            'sodium':[45, 40, 65, 30, 65, 60],\n",
    "            'corp': ['coca cola', 'coca cola', 'coca cola', 'pepsico', 'pepsico', 'pepsico']}\n",
    "\n",
    "soda = pd.DataFrame(data_dict)\n",
    "soda"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "2. Print a DataFrame containing only sodas with more than 10 calories."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>soda</th>\n",
       "      <th>cals</th>\n",
       "      <th>sodium</th>\n",
       "      <th>corp</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>coke</td>\n",
       "      <td>140</td>\n",
       "      <td>45</td>\n",
       "      <td>coca cola</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>sprite</td>\n",
       "      <td>90</td>\n",
       "      <td>65</td>\n",
       "      <td>coca cola</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>pepsi</td>\n",
       "      <td>150</td>\n",
       "      <td>30</td>\n",
       "      <td>pepsico</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>mug</td>\n",
       "      <td>130</td>\n",
       "      <td>65</td>\n",
       "      <td>pepsico</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>mt. dew</td>\n",
       "      <td>170</td>\n",
       "      <td>60</td>\n",
       "      <td>pepsico</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      soda  cals  sodium       corp\n",
       "0     coke   140      45  coca cola\n",
       "2   sprite    90      65  coca cola\n",
       "3    pepsi   150      30    pepsico\n",
       "4      mug   130      65    pepsico\n",
       "5  mt. dew   170      60    pepsico"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "soda[soda['cals']>10]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "3. Print a DataFrame containing only sodas with more than 10 calories and less than 100 calories."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>soda</th>\n",
       "      <th>cals</th>\n",
       "      <th>sodium</th>\n",
       "      <th>corp</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>sprite</td>\n",
       "      <td>90</td>\n",
       "      <td>65</td>\n",
       "      <td>coca cola</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     soda  cals  sodium       corp\n",
       "2  sprite    90      65  coca cola"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "soda[ (soda['cals']>10) & (soda['cals']< 100)]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "4. Print a DataFrame containing only data for coke, pepsi, and mug. Use the `isin()` method."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>soda</th>\n",
       "      <th>cals</th>\n",
       "      <th>sodium</th>\n",
       "      <th>corp</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>coke</td>\n",
       "      <td>140</td>\n",
       "      <td>45</td>\n",
       "      <td>coca cola</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>pepsi</td>\n",
       "      <td>150</td>\n",
       "      <td>30</td>\n",
       "      <td>pepsico</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>mug</td>\n",
       "      <td>130</td>\n",
       "      <td>65</td>\n",
       "      <td>pepsico</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    soda  cals  sodium       corp\n",
       "0   coke   140      45  coca cola\n",
       "3  pepsi   150      30    pepsico\n",
       "4    mug   130      65    pepsico"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "to_get = ['coke', 'pepsi', 'mug']\n",
    "soda[ soda['soda'].isin(to_get) ]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "5. Set the index of the DataFrame to 'soda'."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "soda.set_index('soda', inplace=True)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "6. Use `.loc[]` to print a DataFrame containing only coke, pepsi, and mug."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>cals</th>\n",
       "      <th>sodium</th>\n",
       "      <th>corp</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>soda</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>coke</th>\n",
       "      <td>140</td>\n",
       "      <td>45</td>\n",
       "      <td>coca cola</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>pepsi</th>\n",
       "      <td>150</td>\n",
       "      <td>30</td>\n",
       "      <td>pepsico</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mug</th>\n",
       "      <td>130</td>\n",
       "      <td>65</td>\n",
       "      <td>pepsico</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       cals  sodium       corp\n",
       "soda                          \n",
       "coke    140      45  coca cola\n",
       "pepsi   150      30    pepsico\n",
       "mug     130      65    pepsico"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "soda.loc[['coke','pepsi', 'mug']]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "7. Print out the average sodium for pepsico products that have more than 135 calories. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "45.0"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "soda[ (soda['corp']=='pepsico') & (soda['cals']>135)]['sodium'].mean()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "8. Print out the number of pepsico products with sodium above 60 mg."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "soda[ (soda['corp']=='pepsico') & (soda['sodium']>60) ].shape[0]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "9. Print out the calories in a coke. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "140"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "soda.loc['coke', 'cals']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "10. Reset the index on your DataFrame and create a MultiIndex of corp and soda. Sort your index!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [],
   "source": [
    "soda = soda.reset_index()\n",
    "soda.set_index(['corp','soda'], inplace=True)\n",
    "soda.sort_index(axis=0, inplace=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "11. Print the mean calories and sodium level for coca cola products."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "cals      77.0\n",
       "sodium    50.0\n",
       "dtype: float64"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "soda.loc['coca cola'].mean()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Exercise 1: Wages, Education, and Gender\n",
    "\n",
    "## (Continued from Exam 1, Exercise 3)\n",
    "\n",
    "The goal of this exercise is to make a bar chart of hourly wages by gender and level of education. Some useful example code for a similar chart can be found at https://matplotlib.org/gallery/statistics/barchart_demo.html.\n",
    "\n",
    "To create the bar chart, follow the instructions below:\n",
    "\n",
    "1. As on the exam, import the file \"CPS_March_2016.csv\" into a Pandas dataframe. Be careful with missing values. Drop workers who didn't work full time last year or whose hourly wage was less than \\$5 or more than \\$200."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Import data:\n",
    "cps = pd.read_csv(\"CPS_March_2016.csv\",na_values = \".\")\n",
    "\n",
    "# Keep individuals who worked full time last year and with wages between $5 and $200.\n",
    "cps = cps[(cps['fulltimely'] == 1) & (cps['hrwage'] >= 5) & (cps['hrwage'] <= 200)]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "2. Obtain the average wage by level of education for females and males using the `.groupby()` and `.mean()` methods. You should obtain two Pandas series: one containing the average wage by education level for females, and the other for males. Call these `wages_females` and `wages_males`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Obtain conditional means by gender and education level:\n",
    "wages_females = cps[cps['female'] == 1].groupby(['educ'])['hrwage'].mean()\n",
    "wages_males = cps[cps['female'] == 0].groupby(['educ'])['hrwage'].mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "educ\n",
       "College degree     27.195870\n",
       "Graduate degree    35.492438\n",
       "HS diploma/GED     16.074795\n",
       "Less than HS       12.432817\n",
       "Some college       19.170539\n",
       "Name: hrwage, dtype: float64"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "wages_females"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "3. Print out `wages_females` and `wages_males`. Note that the `.groupby()` method has set the level of education as the index of each series and that the series is sorted alphabetically. Reorder each series so that the data is sorted by level of attainment: 'Less than HS' first, 'HS diploma/GED' second, and so on."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Reorder the series of wages so that they are sorted by level of education prior to making the bar chart:\n",
    "# Let's look at two ways\n",
    "\n",
    "# Using loc[]\n",
    "wages_females = wages_females.loc[['Less than HS','HS diploma/GED','Some college','College degree','Graduate degree']]\n",
    "\n",
    "# Using reindex()\n",
    "wages_males = wages_males.reindex(['Less than HS','HS diploma/GED','Some college','College degree','Graduate degree'])\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "4. Now we have everything we need to make the bar chart. Format the plot as follows:\n",
    "    1. Set the figure size to (11,8.5).\n",
    "    2. Color the female bars magenta and the male bars blue. Set the alpha composite to 0.75. Create a legend describing the color of each bar. Make sure the spacing between bars is appropriate, with some whitespace between each level of education.\n",
    "    3. Label the horizontal axis tick marks with the appropriate level of education.\n",
    "    4. Label the vertical axis \"Dollars per hour\", and title the figure \"Average hourly wage by gender and level of education\".\n",
    "    5. Remove the borders on the top and right sides of the figure.\n",
    "    6. In some whitespace on the figure, insert text containing the overall average wage in dollars and cents for males and females (this should be the overall average by gender, not conditional on education).\n",
    "4. **Not required, but fun and challenging:** Print the appropriate wage level in dollars and cents on the top of each bar."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 792x612 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots(figsize=(11,8.5))\n",
    "\n",
    "# This will be the x axis points where each set of bars is plotted:\n",
    "positions = list(range(len(wages_females)))\n",
    "\n",
    "# Set width of each bar:\n",
    "width = 0.3\n",
    "\n",
    "# Set gap between bars\n",
    "gap = 0.05\n",
    "\n",
    "\n",
    "# First, plot the female data. The equal sign is assigning the bar objects to bars_females to use\n",
    "# for plotting the data labels.\n",
    "# I shift the female bars to the right (and the males to the left)\n",
    "positions_f = [p + 0.5*width + 0.5*gap for p in positions]\n",
    "bars_females = ax.bar(positions_f, wages_females, width, color='magenta', alpha=0.75)\n",
    "\n",
    "# Now plot the males. \n",
    "# I shift the female bars to the right (and the males to the left)\n",
    "positions_m = [p - 0.5*width - 0.5*gap for p in positions]\n",
    "bars_males = ax.bar(positions_m, wages_males, width, color='blue', alpha=0.75)\n",
    "\n",
    "plt.xticks(positions, wages_females.index)\n",
    "plt.legend(['Females', 'Males'], loc='upper left')\n",
    "plt.ylabel(\"Dollars per hour\")\n",
    "plt.title(\"Average hourly wage by gender and level of education\")\n",
    "\n",
    "# Include the overall average wage by gender in whitespace of the plot:\n",
    "avg_wage_females = cps[cps['female'] == 1]['hrwage'].mean()\n",
    "avg_wage_males = cps[cps['female'] == 0]['hrwage'].mean()\n",
    "plt.text(2,40,\"Average wage for females: ${0:.2f}\".format(avg_wage_females),ha='right')\n",
    "plt.text(2,38,\"Average wage for males: ${0:.2f}\".format(avg_wage_males),ha='right')\n",
    "\n",
    "# Remove borders:\n",
    "ax.spines['right'].set_visible(False)\n",
    "ax.spines['top'].set_visible(False) \n",
    "\n",
    "\n",
    "# Challenge!\n",
    "# Print the average wage on top of each bar:\n",
    "label_gap = 0.5   # space between top of bar and label\n",
    "for rectangle in bars_females + bars_males:\n",
    "    height = rectangle.get_height()\n",
    "    plt.text(rectangle.get_x() + rectangle.get_width()/2.0, height+label_gap,\"${0:.2f}\".format(round(height,2)), ha='center', va='bottom')\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Exercise 2: Cleaning and merging panel data from multiple sources \n",
    "\n",
    "Economists nearly always use data from multiple sources to conduct their analysis. It is almost never the case that all the data required for a project is available from one source. This is often an artifact of how economic data are collected in the United States. For example, the Bureau of Labor Statistics (BLS) is responsible for measuring the unemployment rate, while the Bureau of Economic Analysis (BEA) is responsible for measuring gross domestic product. (These bureaus are themselves parts of different departments of the executive branch -- the Department of Labor in the case of the BLS and the Department of Commerce in the case of the BEA). As a result, data are often published in different formats that require some extra work to merge.\n",
    "\n",
    "In this exercise, your task is to merge state-level unemployment rate data from the BLS with state-level GDP data from the BEA.  You will then make a scatterplot showing Okun's Law for Wisconsin and Michigan.\n",
    "\n",
    "**Note:** An easier way to do this is to use the FRED API to retreive each series directly. However, the purpose of this exercise is to practice cleaning and merging data, so follow the instructions below.\n",
    "\n",
    "### Part (a): Importing and cleaning the GDP data\n",
    "1. Read in the file \"state_gdp.csv\" as a Pandas data frame called `gdp`. This file (downloaded from https://apps.bea.gov/regional/Downloadzip.cfm) contains annualized real GDP (in millions of chained 2009 dollars) for each quarter from 2005Q1 to 2018Q1 for each state and industry. Note that the data is in \"wide\" format.\n",
    "2. Note that the data contains a breakdown of each industry's contribution to GDP in each state. For this exercise, we are only interested in *total* real GDP for each state. Thus, drop all rows for which the column \"Description\" is not equal to \"All industry total\"\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import datetime as dt\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "gdp = pd.read_csv(\"state_gdp.csv\")\n",
    "\n",
    "# Keep state totals:\n",
    "gdp = gdp[gdp['Description'] == \"All industry total\"]\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "3. Note that the data also contains real GDP for the United States as a whole as well as for several subregions. Since we are only interested in states, these need to be dropped as well. To do this, drop any row for which the column 'GeoName' contains \"United States\", \"New England\", \"Mideast\", \"Great Lakes\", \"Plains\", \"Southeast\", \"Southwest\", \"Rocky Mountain\", or \"Far West\".\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [],
   "source": [
    "# List of regions we don't need:\n",
    "place_list = [\"United States\", \"New England\", \"Mideast\", \"Great Lakes\", \"Plains\",\n",
    "              \"Southeast\", \"Southwest\", \"Rocky Mountain\", \"Far West\"]\n",
    "\n",
    "# Drop regions we don't need:\n",
    "gdp = gdp[~gdp['GeoName'].isin(place_list)]\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "4. Drop the columns 'GeoFIPS', 'Region', 'ComponentId', 'ComponentName', 'IndustryId', 'IndustryClassification', and 'Description'. Then rename the column 'GeoFIPS' to 'state'.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Drop unnecessary columns:\n",
    "gdp.drop(['GeoFIPS', 'Region', 'ComponentId', 'ComponentName', 'IndustryId', 'IndustryClassification', 'Description'],\n",
    "         axis=1, inplace = True)\n",
    "\n",
    "# Rename columns and set the index:\n",
    "gdp.rename(columns={'GeoName':'state'}, inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "state       object\n",
       "2005:Q1     object\n",
       "2005:Q2     object\n",
       "2005:Q3     object\n",
       "2005:Q4     object\n",
       "2006:Q1    float64\n",
       "2006:Q2    float64\n",
       "2006:Q3    float64\n",
       "2006:Q4    float64\n",
       "2007:Q1     object\n",
       "2007:Q2     object\n",
       "2007:Q3     object\n",
       "2007:Q4    float64\n",
       "2008:Q1     object\n",
       "2008:Q2     object\n",
       "2008:Q3     object\n",
       "2008:Q4     object\n",
       "2009:Q1     object\n",
       "2009:Q2     object\n",
       "2009:Q3     object\n",
       "2009:Q4     object\n",
       "2010:Q1     object\n",
       "2010:Q2     object\n",
       "2010:Q3     object\n",
       "2010:Q4     object\n",
       "2011:Q1     object\n",
       "2011:Q2     object\n",
       "2011:Q3     object\n",
       "2011:Q4     object\n",
       "2012:Q1     object\n",
       "2012:Q2     object\n",
       "2012:Q3     object\n",
       "2012:Q4     object\n",
       "2013:Q1     object\n",
       "2013:Q2     object\n",
       "2013:Q3     object\n",
       "2013:Q4     object\n",
       "2014:Q1     object\n",
       "2014:Q2     object\n",
       "2014:Q3     object\n",
       "2014:Q4     object\n",
       "2015:Q1     object\n",
       "2015:Q2     object\n",
       "2015:Q3     object\n",
       "2015:Q4     object\n",
       "2016:Q1     object\n",
       "2016:Q2     object\n",
       "2016:Q3     object\n",
       "2016:Q4     object\n",
       "2017:Q1     object\n",
       "2017:Q2     object\n",
       "2017:Q3     object\n",
       "2017:Q4     object\n",
       "2018:Q1     object\n",
       "dtype: object"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gdp.dtypes"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "5. Use the `.melt()` method to convert the data from wide to long format. Then rename the columns 'variable' to 'date' and 'value' to 'real_gdp'. Also, convert 'real_gdp' to a floating point number (the columns containing the GDP data were originally imported as strings since some values of GDP for some industries/states are censored or missing)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Convert data from wide to long using the .melt() method:\n",
    "gdp = gdp.melt(id_vars=['state'])\n",
    "\n",
    "# Rename columns, convert real_gdp to float\n",
    "gdp.rename(columns={'variable':'date', 'value':'real_gdp'}, inplace = True)\n",
    "gdp['real_gdp'] = gdp['real_gdp'].astype(float)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>state</th>\n",
       "      <th>date</th>\n",
       "      <th>real_gdp</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Alabama</td>\n",
       "      <td>2005:Q1</td>\n",
       "      <td>169741.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Alaska</td>\n",
       "      <td>2005:Q1</td>\n",
       "      <td>40299.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Arizona</td>\n",
       "      <td>2005:Q1</td>\n",
       "      <td>243828.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Arkansas</td>\n",
       "      <td>2005:Q1</td>\n",
       "      <td>97934.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>California</td>\n",
       "      <td>2005:Q1</td>\n",
       "      <td>1881001.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Colorado</td>\n",
       "      <td>2005:Q1</td>\n",
       "      <td>238315.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Connecticut</td>\n",
       "      <td>2005:Q1</td>\n",
       "      <td>230302.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Delaware</td>\n",
       "      <td>2005:Q1</td>\n",
       "      <td>56408.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>District of Columbia</td>\n",
       "      <td>2005:Q1</td>\n",
       "      <td>92533.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Florida</td>\n",
       "      <td>2005:Q1</td>\n",
       "      <td>759054.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>Georgia</td>\n",
       "      <td>2005:Q1</td>\n",
       "      <td>421722.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>Hawaii</td>\n",
       "      <td>2005:Q1</td>\n",
       "      <td>64189.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>Idaho</td>\n",
       "      <td>2005:Q1</td>\n",
       "      <td>50451.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>Illinois</td>\n",
       "      <td>2005:Q1</td>\n",
       "      <td>644125.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>Indiana</td>\n",
       "      <td>2005:Q1</td>\n",
       "      <td>266609.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>Iowa</td>\n",
       "      <td>2005:Q1</td>\n",
       "      <td>134575.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>Kansas</td>\n",
       "      <td>2005:Q1</td>\n",
       "      <td>114130.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>Kentucky</td>\n",
       "      <td>2005:Q1</td>\n",
       "      <td>157583.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>Louisiana</td>\n",
       "      <td>2005:Q1</td>\n",
       "      <td>215236.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>Maine</td>\n",
       "      <td>2005:Q1</td>\n",
       "      <td>51175.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>Maryland</td>\n",
       "      <td>2005:Q1</td>\n",
       "      <td>285634.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>Massachusetts</td>\n",
       "      <td>2005:Q1</td>\n",
       "      <td>374728.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>Michigan</td>\n",
       "      <td>2005:Q1</td>\n",
       "      <td>434494.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>Minnesota</td>\n",
       "      <td>2005:Q1</td>\n",
       "      <td>266036.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>Mississippi</td>\n",
       "      <td>2005:Q1</td>\n",
       "      <td>88496.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>Missouri</td>\n",
       "      <td>2005:Q1</td>\n",
       "      <td>246437.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>Montana</td>\n",
       "      <td>2005:Q1</td>\n",
       "      <td>33698.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>Nebraska</td>\n",
       "      <td>2005:Q1</td>\n",
       "      <td>80027.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>Nevada</td>\n",
       "      <td>2005:Q1</td>\n",
       "      <td>130226.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>New Hampshire</td>\n",
       "      <td>2005:Q1</td>\n",
       "      <td>62327.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2673</th>\n",
       "      <td>Massachusetts</td>\n",
       "      <td>2018:Q1</td>\n",
       "      <td>463177.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2674</th>\n",
       "      <td>Michigan</td>\n",
       "      <td>2018:Q1</td>\n",
       "      <td>446410.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2675</th>\n",
       "      <td>Minnesota</td>\n",
       "      <td>2018:Q1</td>\n",
       "      <td>306603.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2676</th>\n",
       "      <td>Mississippi</td>\n",
       "      <td>2018:Q1</td>\n",
       "      <td>97682.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2677</th>\n",
       "      <td>Missouri</td>\n",
       "      <td>2018:Q1</td>\n",
       "      <td>266640.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2678</th>\n",
       "      <td>Montana</td>\n",
       "      <td>2018:Q1</td>\n",
       "      <td>42161.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2679</th>\n",
       "      <td>Nebraska</td>\n",
       "      <td>2018:Q1</td>\n",
       "      <td>105684.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2680</th>\n",
       "      <td>Nevada</td>\n",
       "      <td>2018:Q1</td>\n",
       "      <td>137154.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2681</th>\n",
       "      <td>New Hampshire</td>\n",
       "      <td>2018:Q1</td>\n",
       "      <td>71603.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2682</th>\n",
       "      <td>New Jersey</td>\n",
       "      <td>2018:Q1</td>\n",
       "      <td>518292.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2683</th>\n",
       "      <td>New Mexico</td>\n",
       "      <td>2018:Q1</td>\n",
       "      <td>87928.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2684</th>\n",
       "      <td>New York</td>\n",
       "      <td>2018:Q1</td>\n",
       "      <td>1301685.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2685</th>\n",
       "      <td>North Carolina</td>\n",
       "      <td>2018:Q1</td>\n",
       "      <td>465914.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2686</th>\n",
       "      <td>North Dakota</td>\n",
       "      <td>2018:Q1</td>\n",
       "      <td>48795.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2687</th>\n",
       "      <td>Ohio</td>\n",
       "      <td>2018:Q1</td>\n",
       "      <td>569523.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2688</th>\n",
       "      <td>Oklahoma</td>\n",
       "      <td>2018:Q1</td>\n",
       "      <td>176535.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2689</th>\n",
       "      <td>Oregon</td>\n",
       "      <td>2018:Q1</td>\n",
       "      <td>216573.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2690</th>\n",
       "      <td>Pennsylvania</td>\n",
       "      <td>2018:Q1</td>\n",
       "      <td>675240.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2691</th>\n",
       "      <td>Rhode Island</td>\n",
       "      <td>2018:Q1</td>\n",
       "      <td>52039.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2692</th>\n",
       "      <td>South Carolina</td>\n",
       "      <td>2018:Q1</td>\n",
       "      <td>191424.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2693</th>\n",
       "      <td>South Dakota</td>\n",
       "      <td>2018:Q1</td>\n",
       "      <td>42077.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2694</th>\n",
       "      <td>Tennessee</td>\n",
       "      <td>2018:Q1</td>\n",
       "      <td>303271.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2695</th>\n",
       "      <td>Texas</td>\n",
       "      <td>2018:Q1</td>\n",
       "      <td>1558619.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2696</th>\n",
       "      <td>Utah</td>\n",
       "      <td>2018:Q1</td>\n",
       "      <td>144230.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2697</th>\n",
       "      <td>Vermont</td>\n",
       "      <td>2018:Q1</td>\n",
       "      <td>28297.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2698</th>\n",
       "      <td>Virginia</td>\n",
       "      <td>2018:Q1</td>\n",
       "      <td>449008.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2699</th>\n",
       "      <td>Washington</td>\n",
       "      <td>2018:Q1</td>\n",
       "      <td>450253.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2700</th>\n",
       "      <td>West Virginia</td>\n",
       "      <td>2018:Q1</td>\n",
       "      <td>68947.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2701</th>\n",
       "      <td>Wisconsin</td>\n",
       "      <td>2018:Q1</td>\n",
       "      <td>286934.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2702</th>\n",
       "      <td>Wyoming</td>\n",
       "      <td>2018:Q1</td>\n",
       "      <td>36041.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2703 rows Ã— 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                     state     date   real_gdp\n",
       "0                  Alabama  2005:Q1   169741.0\n",
       "1                   Alaska  2005:Q1    40299.0\n",
       "2                  Arizona  2005:Q1   243828.0\n",
       "3                 Arkansas  2005:Q1    97934.0\n",
       "4               California  2005:Q1  1881001.0\n",
       "5                 Colorado  2005:Q1   238315.0\n",
       "6              Connecticut  2005:Q1   230302.0\n",
       "7                 Delaware  2005:Q1    56408.0\n",
       "8     District of Columbia  2005:Q1    92533.0\n",
       "9                  Florida  2005:Q1   759054.0\n",
       "10                 Georgia  2005:Q1   421722.0\n",
       "11                  Hawaii  2005:Q1    64189.0\n",
       "12                   Idaho  2005:Q1    50451.0\n",
       "13                Illinois  2005:Q1   644125.0\n",
       "14                 Indiana  2005:Q1   266609.0\n",
       "15                    Iowa  2005:Q1   134575.0\n",
       "16                  Kansas  2005:Q1   114130.0\n",
       "17                Kentucky  2005:Q1   157583.0\n",
       "18               Louisiana  2005:Q1   215236.0\n",
       "19                   Maine  2005:Q1    51175.0\n",
       "20                Maryland  2005:Q1   285634.0\n",
       "21           Massachusetts  2005:Q1   374728.0\n",
       "22                Michigan  2005:Q1   434494.0\n",
       "23               Minnesota  2005:Q1   266036.0\n",
       "24             Mississippi  2005:Q1    88496.0\n",
       "25                Missouri  2005:Q1   246437.0\n",
       "26                 Montana  2005:Q1    33698.0\n",
       "27                Nebraska  2005:Q1    80027.0\n",
       "28                  Nevada  2005:Q1   130226.0\n",
       "29           New Hampshire  2005:Q1    62327.0\n",
       "...                    ...      ...        ...\n",
       "2673         Massachusetts  2018:Q1   463177.0\n",
       "2674              Michigan  2018:Q1   446410.0\n",
       "2675             Minnesota  2018:Q1   306603.0\n",
       "2676           Mississippi  2018:Q1    97682.0\n",
       "2677              Missouri  2018:Q1   266640.0\n",
       "2678               Montana  2018:Q1    42161.0\n",
       "2679              Nebraska  2018:Q1   105684.0\n",
       "2680                Nevada  2018:Q1   137154.0\n",
       "2681         New Hampshire  2018:Q1    71603.0\n",
       "2682            New Jersey  2018:Q1   518292.0\n",
       "2683            New Mexico  2018:Q1    87928.0\n",
       "2684              New York  2018:Q1  1301685.0\n",
       "2685        North Carolina  2018:Q1   465914.0\n",
       "2686          North Dakota  2018:Q1    48795.0\n",
       "2687                  Ohio  2018:Q1   569523.0\n",
       "2688              Oklahoma  2018:Q1   176535.0\n",
       "2689                Oregon  2018:Q1   216573.0\n",
       "2690          Pennsylvania  2018:Q1   675240.0\n",
       "2691          Rhode Island  2018:Q1    52039.0\n",
       "2692        South Carolina  2018:Q1   191424.0\n",
       "2693          South Dakota  2018:Q1    42077.0\n",
       "2694             Tennessee  2018:Q1   303271.0\n",
       "2695                 Texas  2018:Q1  1558619.0\n",
       "2696                  Utah  2018:Q1   144230.0\n",
       "2697               Vermont  2018:Q1    28297.0\n",
       "2698              Virginia  2018:Q1   449008.0\n",
       "2699            Washington  2018:Q1   450253.0\n",
       "2700         West Virginia  2018:Q1    68947.0\n",
       "2701             Wisconsin  2018:Q1   286934.0\n",
       "2702               Wyoming  2018:Q1    36041.0\n",
       "\n",
       "[2703 rows x 3 columns]"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gdp"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "6. Finally, we should convert the date to a datetime object. This will require a few steps:\n",
    "    1. Unfortunately, the `datetime` package doesn't like the format of our dates: \"2005:Q1\" etc. Use the `.str.replace()` method to replace the colon \":\" with an empty string \"\".\n",
    "    2. Now convert 'date' to a datetime object. Then use `dt.to_period(\"Q\")` to change the formating from year-month-day to year-quarter."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Replace the colon with an empty string:\n",
    "gdp['date'] = gdp['date'].str.replace(':','')\n",
    "\n",
    "# Convert date to a datetime object, then convert from year-month-day to year-quarter:\n",
    "gdp['date'] = pd.to_datetime(gdp['date'])\n",
    "gdp['date'] = gdp['date'].dt.to_period(\"Q\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "pandas._libs.tslibs.period.Period"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(gdp['date'][0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>state</th>\n",
       "      <th>date</th>\n",
       "      <th>real_gdp</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Alabama</td>\n",
       "      <td>2005Q1</td>\n",
       "      <td>169741.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Alaska</td>\n",
       "      <td>2005Q1</td>\n",
       "      <td>40299.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Arizona</td>\n",
       "      <td>2005Q1</td>\n",
       "      <td>243828.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Arkansas</td>\n",
       "      <td>2005Q1</td>\n",
       "      <td>97934.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>California</td>\n",
       "      <td>2005Q1</td>\n",
       "      <td>1881001.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        state   date   real_gdp\n",
       "0     Alabama 2005Q1   169741.0\n",
       "1      Alaska 2005Q1    40299.0\n",
       "2     Arizona 2005Q1   243828.0\n",
       "3    Arkansas 2005Q1    97934.0\n",
       "4  California 2005Q1  1881001.0"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gdp.head()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Part (b): Importing and cleaning the unemployment rate data\n",
    "\n",
    "1. Import the file \"state_unemp.xlsx\" as a Pandas data frame called `unemp`.  This file (downloaded from https://www.bls.gov/lau/rdscnp16.htm) contains measures of the population, labor force, employment, unemployment, and unemployment rate by state (plus New York City and Los Angeles County) in each month from January 1976 to September 2018. Notice how different the formmating is compared to the GDP data! When importing, do the following:\n",
    "    1. The column names are not friendly for importing, so keep only columns 1, 2, 3, and 10. \n",
    "    2. Set the remaining column names to 'state', 'year', 'month', and 'unemp_rate'. \n",
    "    3. Use `skiprows=8` to avoid importing the messy headers.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [],
   "source": [
    "unemp = pd.read_excel(\"state_unemp.xlsx\", usecols=[1,2,3,10],names=['state','year','month','unemp_rate'],skiprows=8)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "2. Drop the observations for \"Los Angeles County\" and \"New York City\"."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [],
   "source": [
    "# List of cities we don't need:\n",
    "city_list = [\"Los Angeles County\",\"New York City\"]\n",
    "\n",
    "# Drop the city observations\n",
    "unemp = unemp[~unemp['state'].isin(city_list)]\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "3. Create a new column called 'day' that is equal to 1. Then create a datetime object 'date' from the columns year, month, and day. Then drop the year, month, and day columns and set 'date' as the index."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create a day variabe:\n",
    "unemp['day'] = 1\n",
    "\n",
    "# Create 'date' as a datetime object: \n",
    "unemp['date'] = pd.to_datetime(unemp[['year','month','day']])\n",
    "\n",
    "# Drop unnecessary variables:\n",
    "unemp.drop(['year','month','day'], axis=1, inplace=True)\n",
    "\n",
    "# Set date as the index:\n",
    "unemp.set_index(['date'], inplace=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "4. Use the `.groupby()`, `.resample()`, and `.mean()` methods to convert the data to quarterly frequency in each state.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Resample to quarterly frequency by state:\n",
    "unemp = unemp.groupby('state').resample('q').mean()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "5. Reset the index and then use `dt.to_period(\"Q\")` to change the formating from year-month-day to year-quarter."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Reset index and convert datetime from year-month-day to year-quarter:\n",
    "unemp.reset_index(inplace=True)\n",
    "unemp['date']= unemp['date'].dt.to_period(\"Q\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Part (c): Merging and plotting the data\n",
    "\n",
    "1. Create a new data frame by merging the gdp and unemployment rate data on 'state' and 'date'. Set 'state' and 'date' as the index on the new data frame and sort the index."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                   state   date   real_gdp  unemp_rate\n",
      "0                Alabama 2005Q1   169741.0    4.933333\n",
      "1                 Alaska 2005Q1    40299.0    7.000000\n",
      "2                Arizona 2005Q1   243828.0    4.800000\n",
      "3               Arkansas 2005Q1    97934.0    5.366667\n",
      "4             California 2005Q1  1881001.0    5.700000\n",
      "5               Colorado 2005Q1   238315.0    5.266667\n",
      "6            Connecticut 2005Q1   230302.0    4.933333\n",
      "7               Delaware 2005Q1    56408.0    4.000000\n",
      "8   District of Columbia 2005Q1    92533.0    7.333333\n",
      "9                Florida 2005Q1   759054.0    4.166667\n",
      "10               Georgia 2005Q1   421722.0    5.366667\n",
      "11                Hawaii 2005Q1    64189.0    3.033333\n",
      "12                 Idaho 2005Q1    50451.0    4.233333\n",
      "13              Illinois 2005Q1   644125.0    5.966667\n",
      "14               Indiana 2005Q1   266609.0    5.666667\n",
      "15                  Iowa 2005Q1   134575.0    4.433333\n",
      "16                Kansas 2005Q1   114130.0    5.266667\n",
      "17              Kentucky 2005Q1   157583.0    5.566667\n",
      "18             Louisiana 2005Q1   215236.0    5.766667\n",
      "19                 Maine 2005Q1    51175.0    4.900000\n",
      "20              Maryland 2005Q1   285634.0    4.300000\n",
      "21         Massachusetts 2005Q1   374728.0    4.900000\n",
      "22              Michigan 2005Q1   434494.0    7.100000\n",
      "23             Minnesota 2005Q1   266036.0    4.233333\n",
      "24           Mississippi 2005Q1    88496.0    6.766667\n",
      "25              Missouri 2005Q1   246437.0    5.866667\n",
      "26               Montana 2005Q1    33698.0    4.533333\n",
      "27              Nebraska 2005Q1    80027.0    4.000000\n",
      "28                Nevada 2005Q1   130226.0    4.100000\n",
      "29         New Hampshire 2005Q1    62327.0    3.600000\n",
      "30            New Jersey 2005Q1   489556.0    4.333333\n",
      "31            New Mexico 2005Q1    79624.0    5.400000\n",
      "32              New York 2005Q1  1099738.0    5.066667\n",
      "33        North Carolina 2005Q1   387957.0    5.433333\n",
      "34          North Dakota 2005Q1    26487.0    3.400000\n",
      "35                  Ohio 2005Q1   509369.0    6.233333\n",
      "36              Oklahoma 2005Q1   133345.0    4.666667\n",
      "37                Oregon 2005Q1   152395.0    6.433333\n",
      "38          Pennsylvania 2005Q1   554887.0    5.166667\n",
      "39          Rhode Island 2005Q1    49974.0    5.000000\n",
      "40        South Carolina 2005Q1   158673.0    6.766667\n",
      "41          South Dakota 2005Q1    32776.0    3.966667\n",
      "42             Tennessee 2005Q1   248522.0    5.900000\n",
      "43                 Texas 2005Q1  1042577.0    5.666667\n",
      "44                  Utah 2005Q1    99949.0    4.366667\n",
      "45               Vermont 2005Q1    25743.0    3.466667\n",
      "46              Virginia 2005Q1   389232.0    3.700000\n",
      "47            Washington 2005Q1   321178.0    5.733333\n",
      "48         West Virginia 2005Q1    60643.0    5.166667\n",
      "49             Wisconsin 2005Q1   248658.0    4.700000\n",
      "50               Wyoming 2005Q1    29404.0    3.533333\n",
      "51               Alabama 2005Q2   172087.0    4.500000\n",
      "52                Alaska 2005Q2    40880.0    6.800000\n",
      "53               Arizona 2005Q2   249334.0    4.733333\n",
      "54              Arkansas 2005Q2    98631.0    5.266667\n",
      "55            California 2005Q2  1900029.0    5.400000\n",
      "56              Colorado 2005Q2   238490.0    5.133333\n",
      "57           Connecticut 2005Q2   232759.0    5.000000\n",
      "58              Delaware 2005Q2    55141.0    4.100000\n",
      "59  District of Columbia 2005Q2    92688.0    6.566667\n"
     ]
    }
   ],
   "source": [
    "data = pd.merge(left=gdp, right=unemp,on=['state','date'],how='inner')\n",
    "print(data.head(60))\n",
    "data.set_index(['state','date'],inplace=True)\n",
    "data.sort_index(inplace=True)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "2. Calculate the growth rate of real GDP and the change in the unemployment rate for each state and quarter; create new columns for each."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [],
   "source": [
    "# For some reason the .diff() method (correctly) generates a NaN for the first value\n",
    "# for each state, but the .pct_change() method doesn't. Weird -- doesn't matter for this exercise but good to be aware of.\n",
    "data['gdp_growth_rate'] = data.groupby('state')['real_gdp'].pct_change()*100\n",
    "data['chg_unemp_rate'] = data.groupby('state')['unemp_rate'].diff()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>real_gdp</th>\n",
       "      <th>unemp_rate</th>\n",
       "      <th>gdp_growth_rate</th>\n",
       "      <th>chg_unemp_rate</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>state</th>\n",
       "      <th>date</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"53\" valign=\"top\">Alabama</th>\n",
       "      <th>2005Q1</th>\n",
       "      <td>169741.0</td>\n",
       "      <td>4.933333</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2005Q2</th>\n",
       "      <td>172087.0</td>\n",
       "      <td>4.500000</td>\n",
       "      <td>1.382106</td>\n",
       "      <td>-0.433333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2005Q3</th>\n",
       "      <td>171819.0</td>\n",
       "      <td>4.333333</td>\n",
       "      <td>-0.155735</td>\n",
       "      <td>-0.166667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2005Q4</th>\n",
       "      <td>173245.0</td>\n",
       "      <td>4.233333</td>\n",
       "      <td>0.829943</td>\n",
       "      <td>-0.100000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2006Q1</th>\n",
       "      <td>173722.0</td>\n",
       "      <td>4.100000</td>\n",
       "      <td>0.275333</td>\n",
       "      <td>-0.133333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2006Q2</th>\n",
       "      <td>174750.0</td>\n",
       "      <td>4.100000</td>\n",
       "      <td>0.591750</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2006Q3</th>\n",
       "      <td>175038.0</td>\n",
       "      <td>4.100000</td>\n",
       "      <td>0.164807</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2006Q4</th>\n",
       "      <td>175191.0</td>\n",
       "      <td>3.966667</td>\n",
       "      <td>0.087410</td>\n",
       "      <td>-0.133333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2007Q1</th>\n",
       "      <td>173546.0</td>\n",
       "      <td>3.833333</td>\n",
       "      <td>-0.938975</td>\n",
       "      <td>-0.133333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2007Q2</th>\n",
       "      <td>174853.0</td>\n",
       "      <td>3.800000</td>\n",
       "      <td>0.753114</td>\n",
       "      <td>-0.033333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2007Q3</th>\n",
       "      <td>176436.0</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>0.905332</td>\n",
       "      <td>0.200000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2007Q4</th>\n",
       "      <td>176494.0</td>\n",
       "      <td>4.266667</td>\n",
       "      <td>0.032873</td>\n",
       "      <td>0.266667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2008Q1</th>\n",
       "      <td>175499.0</td>\n",
       "      <td>4.500000</td>\n",
       "      <td>-0.563759</td>\n",
       "      <td>0.233333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2008Q2</th>\n",
       "      <td>176710.0</td>\n",
       "      <td>5.066667</td>\n",
       "      <td>0.690032</td>\n",
       "      <td>0.566667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2008Q3</th>\n",
       "      <td>175263.0</td>\n",
       "      <td>5.900000</td>\n",
       "      <td>-0.818856</td>\n",
       "      <td>0.833333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2008Q4</th>\n",
       "      <td>170365.0</td>\n",
       "      <td>7.400000</td>\n",
       "      <td>-2.794657</td>\n",
       "      <td>1.500000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2009Q1</th>\n",
       "      <td>168383.0</td>\n",
       "      <td>9.566667</td>\n",
       "      <td>-1.163384</td>\n",
       "      <td>2.166667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2009Q2</th>\n",
       "      <td>168182.0</td>\n",
       "      <td>11.000000</td>\n",
       "      <td>-0.119371</td>\n",
       "      <td>1.433333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2009Q3</th>\n",
       "      <td>168637.0</td>\n",
       "      <td>11.600000</td>\n",
       "      <td>0.270540</td>\n",
       "      <td>0.600000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2009Q4</th>\n",
       "      <td>168056.0</td>\n",
       "      <td>11.800000</td>\n",
       "      <td>-0.344527</td>\n",
       "      <td>0.200000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2010Q1</th>\n",
       "      <td>168829.0</td>\n",
       "      <td>11.566667</td>\n",
       "      <td>0.459966</td>\n",
       "      <td>-0.233333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2010Q2</th>\n",
       "      <td>171067.0</td>\n",
       "      <td>10.433333</td>\n",
       "      <td>1.325602</td>\n",
       "      <td>-1.133333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2010Q3</th>\n",
       "      <td>173828.0</td>\n",
       "      <td>9.966667</td>\n",
       "      <td>1.613988</td>\n",
       "      <td>-0.466667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2010Q4</th>\n",
       "      <td>173720.0</td>\n",
       "      <td>10.200000</td>\n",
       "      <td>-0.062130</td>\n",
       "      <td>0.233333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2011Q1</th>\n",
       "      <td>171758.0</td>\n",
       "      <td>10.166667</td>\n",
       "      <td>-1.129404</td>\n",
       "      <td>-0.033333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2011Q2</th>\n",
       "      <td>172997.0</td>\n",
       "      <td>10.000000</td>\n",
       "      <td>0.721364</td>\n",
       "      <td>-0.166667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2011Q3</th>\n",
       "      <td>174161.0</td>\n",
       "      <td>9.666667</td>\n",
       "      <td>0.672844</td>\n",
       "      <td>-0.333333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2011Q4</th>\n",
       "      <td>176122.0</td>\n",
       "      <td>8.633333</td>\n",
       "      <td>1.125970</td>\n",
       "      <td>-1.033333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2012Q1</th>\n",
       "      <td>176311.0</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>0.107312</td>\n",
       "      <td>-0.633333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2012Q2</th>\n",
       "      <td>176851.0</td>\n",
       "      <td>8.200000</td>\n",
       "      <td>0.306277</td>\n",
       "      <td>0.200000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2012Q3</th>\n",
       "      <td>174204.0</td>\n",
       "      <td>8.066667</td>\n",
       "      <td>-1.496740</td>\n",
       "      <td>-0.133333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2012Q4</th>\n",
       "      <td>174312.0</td>\n",
       "      <td>7.666667</td>\n",
       "      <td>0.061996</td>\n",
       "      <td>-0.400000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2013Q1</th>\n",
       "      <td>177129.0</td>\n",
       "      <td>7.400000</td>\n",
       "      <td>1.616068</td>\n",
       "      <td>-0.266667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2013Q2</th>\n",
       "      <td>176498.0</td>\n",
       "      <td>7.100000</td>\n",
       "      <td>-0.356238</td>\n",
       "      <td>-0.300000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2013Q3</th>\n",
       "      <td>177701.0</td>\n",
       "      <td>7.133333</td>\n",
       "      <td>0.681594</td>\n",
       "      <td>0.033333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2013Q4</th>\n",
       "      <td>176868.0</td>\n",
       "      <td>7.233333</td>\n",
       "      <td>-0.468765</td>\n",
       "      <td>0.100000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2014Q1</th>\n",
       "      <td>174334.0</td>\n",
       "      <td>7.233333</td>\n",
       "      <td>-1.432707</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2014Q2</th>\n",
       "      <td>176108.0</td>\n",
       "      <td>7.000000</td>\n",
       "      <td>1.017587</td>\n",
       "      <td>-0.233333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2014Q3</th>\n",
       "      <td>178312.0</td>\n",
       "      <td>6.600000</td>\n",
       "      <td>1.251505</td>\n",
       "      <td>-0.400000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2014Q4</th>\n",
       "      <td>177375.0</td>\n",
       "      <td>6.233333</td>\n",
       "      <td>-0.525483</td>\n",
       "      <td>-0.366667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2015Q1</th>\n",
       "      <td>177560.0</td>\n",
       "      <td>6.100000</td>\n",
       "      <td>0.104299</td>\n",
       "      <td>-0.133333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2015Q2</th>\n",
       "      <td>178595.0</td>\n",
       "      <td>6.166667</td>\n",
       "      <td>0.582902</td>\n",
       "      <td>0.066667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2015Q3</th>\n",
       "      <td>179275.0</td>\n",
       "      <td>6.100000</td>\n",
       "      <td>0.380750</td>\n",
       "      <td>-0.066667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2015Q4</th>\n",
       "      <td>178970.0</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>-0.170130</td>\n",
       "      <td>-0.100000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2016Q1</th>\n",
       "      <td>179900.0</td>\n",
       "      <td>5.966667</td>\n",
       "      <td>0.519640</td>\n",
       "      <td>-0.033333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2016Q2</th>\n",
       "      <td>180799.0</td>\n",
       "      <td>5.833333</td>\n",
       "      <td>0.499722</td>\n",
       "      <td>-0.133333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2016Q3</th>\n",
       "      <td>180480.0</td>\n",
       "      <td>5.833333</td>\n",
       "      <td>-0.176439</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2016Q4</th>\n",
       "      <td>181251.0</td>\n",
       "      <td>5.800000</td>\n",
       "      <td>0.427194</td>\n",
       "      <td>-0.033333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017Q1</th>\n",
       "      <td>182336.0</td>\n",
       "      <td>5.266667</td>\n",
       "      <td>0.598617</td>\n",
       "      <td>-0.533333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017Q2</th>\n",
       "      <td>182433.0</td>\n",
       "      <td>4.566667</td>\n",
       "      <td>0.053198</td>\n",
       "      <td>-0.700000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017Q3</th>\n",
       "      <td>182673.0</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>0.131555</td>\n",
       "      <td>-0.566667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017Q4</th>\n",
       "      <td>183928.0</td>\n",
       "      <td>3.800000</td>\n",
       "      <td>0.687020</td>\n",
       "      <td>-0.200000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018Q1</th>\n",
       "      <td>184492.0</td>\n",
       "      <td>3.733333</td>\n",
       "      <td>0.306642</td>\n",
       "      <td>-0.066667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"7\" valign=\"top\">Alaska</th>\n",
       "      <th>2005Q1</th>\n",
       "      <td>40299.0</td>\n",
       "      <td>7.000000</td>\n",
       "      <td>-78.156776</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2005Q2</th>\n",
       "      <td>40880.0</td>\n",
       "      <td>6.800000</td>\n",
       "      <td>1.441723</td>\n",
       "      <td>-0.200000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2005Q3</th>\n",
       "      <td>40687.0</td>\n",
       "      <td>6.833333</td>\n",
       "      <td>-0.472114</td>\n",
       "      <td>0.033333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2005Q4</th>\n",
       "      <td>41203.0</td>\n",
       "      <td>6.900000</td>\n",
       "      <td>1.268218</td>\n",
       "      <td>0.066667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2006Q1</th>\n",
       "      <td>42086.0</td>\n",
       "      <td>6.866667</td>\n",
       "      <td>2.143048</td>\n",
       "      <td>-0.033333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2006Q2</th>\n",
       "      <td>43183.0</td>\n",
       "      <td>6.666667</td>\n",
       "      <td>2.606568</td>\n",
       "      <td>-0.200000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2006Q3</th>\n",
       "      <td>43687.0</td>\n",
       "      <td>6.533333</td>\n",
       "      <td>1.167126</td>\n",
       "      <td>-0.133333</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                real_gdp  unemp_rate  gdp_growth_rate  chg_unemp_rate\n",
       "state   date                                                         \n",
       "Alabama 2005Q1  169741.0    4.933333              NaN             NaN\n",
       "        2005Q2  172087.0    4.500000         1.382106       -0.433333\n",
       "        2005Q3  171819.0    4.333333        -0.155735       -0.166667\n",
       "        2005Q4  173245.0    4.233333         0.829943       -0.100000\n",
       "        2006Q1  173722.0    4.100000         0.275333       -0.133333\n",
       "        2006Q2  174750.0    4.100000         0.591750        0.000000\n",
       "        2006Q3  175038.0    4.100000         0.164807        0.000000\n",
       "        2006Q4  175191.0    3.966667         0.087410       -0.133333\n",
       "        2007Q1  173546.0    3.833333        -0.938975       -0.133333\n",
       "        2007Q2  174853.0    3.800000         0.753114       -0.033333\n",
       "        2007Q3  176436.0    4.000000         0.905332        0.200000\n",
       "        2007Q4  176494.0    4.266667         0.032873        0.266667\n",
       "        2008Q1  175499.0    4.500000        -0.563759        0.233333\n",
       "        2008Q2  176710.0    5.066667         0.690032        0.566667\n",
       "        2008Q3  175263.0    5.900000        -0.818856        0.833333\n",
       "        2008Q4  170365.0    7.400000        -2.794657        1.500000\n",
       "        2009Q1  168383.0    9.566667        -1.163384        2.166667\n",
       "        2009Q2  168182.0   11.000000        -0.119371        1.433333\n",
       "        2009Q3  168637.0   11.600000         0.270540        0.600000\n",
       "        2009Q4  168056.0   11.800000        -0.344527        0.200000\n",
       "        2010Q1  168829.0   11.566667         0.459966       -0.233333\n",
       "        2010Q2  171067.0   10.433333         1.325602       -1.133333\n",
       "        2010Q3  173828.0    9.966667         1.613988       -0.466667\n",
       "        2010Q4  173720.0   10.200000        -0.062130        0.233333\n",
       "        2011Q1  171758.0   10.166667        -1.129404       -0.033333\n",
       "        2011Q2  172997.0   10.000000         0.721364       -0.166667\n",
       "        2011Q3  174161.0    9.666667         0.672844       -0.333333\n",
       "        2011Q4  176122.0    8.633333         1.125970       -1.033333\n",
       "        2012Q1  176311.0    8.000000         0.107312       -0.633333\n",
       "        2012Q2  176851.0    8.200000         0.306277        0.200000\n",
       "        2012Q3  174204.0    8.066667        -1.496740       -0.133333\n",
       "        2012Q4  174312.0    7.666667         0.061996       -0.400000\n",
       "        2013Q1  177129.0    7.400000         1.616068       -0.266667\n",
       "        2013Q2  176498.0    7.100000        -0.356238       -0.300000\n",
       "        2013Q3  177701.0    7.133333         0.681594        0.033333\n",
       "        2013Q4  176868.0    7.233333        -0.468765        0.100000\n",
       "        2014Q1  174334.0    7.233333        -1.432707        0.000000\n",
       "        2014Q2  176108.0    7.000000         1.017587       -0.233333\n",
       "        2014Q3  178312.0    6.600000         1.251505       -0.400000\n",
       "        2014Q4  177375.0    6.233333        -0.525483       -0.366667\n",
       "        2015Q1  177560.0    6.100000         0.104299       -0.133333\n",
       "        2015Q2  178595.0    6.166667         0.582902        0.066667\n",
       "        2015Q3  179275.0    6.100000         0.380750       -0.066667\n",
       "        2015Q4  178970.0    6.000000        -0.170130       -0.100000\n",
       "        2016Q1  179900.0    5.966667         0.519640       -0.033333\n",
       "        2016Q2  180799.0    5.833333         0.499722       -0.133333\n",
       "        2016Q3  180480.0    5.833333        -0.176439        0.000000\n",
       "        2016Q4  181251.0    5.800000         0.427194       -0.033333\n",
       "        2017Q1  182336.0    5.266667         0.598617       -0.533333\n",
       "        2017Q2  182433.0    4.566667         0.053198       -0.700000\n",
       "        2017Q3  182673.0    4.000000         0.131555       -0.566667\n",
       "        2017Q4  183928.0    3.800000         0.687020       -0.200000\n",
       "        2018Q1  184492.0    3.733333         0.306642       -0.066667\n",
       "Alaska  2005Q1   40299.0    7.000000       -78.156776             NaN\n",
       "        2005Q2   40880.0    6.800000         1.441723       -0.200000\n",
       "        2005Q3   40687.0    6.833333        -0.472114        0.033333\n",
       "        2005Q4   41203.0    6.900000         1.268218        0.066667\n",
       "        2006Q1   42086.0    6.866667         2.143048       -0.033333\n",
       "        2006Q2   43183.0    6.666667         2.606568       -0.200000\n",
       "        2006Q3   43687.0    6.533333         1.167126       -0.133333"
      ]
     },
     "execution_count": 63,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.head(60)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "3. Change the index to 'state'."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Note that if you don't reset the index first, then the date will be deleted!!! \n",
    "data.reset_index(inplace=True)\n",
    "data.set_index('state', inplace=True)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "4. Now we can make the desired scatterplot. Plot the GDP growth rate against the change in the unemplyoment rate for Wisconsin and Michigan on the same figure, with GDP growth on the horizontal axis and the change in the unemployment rate on the vertical axis. Make the markers for Wisconsin red x's and the markers for Michigan blue squares that aren't filled in (i.e., only the outline should be shown in blue -- the interior should be blank). Make other aspects of the plot look nice, including nice labels and a legend."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 792x612 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Create the scatterplot:\n",
    "fig, ax = plt.subplots(figsize = (11,8.5))\n",
    "ax.scatter(data.loc['Wisconsin','gdp_growth_rate'],data.loc['Wisconsin','chg_unemp_rate'],\n",
    "           color='red',marker='x',label='Wisconsin')\n",
    "ax.scatter(data.loc['Michigan','gdp_growth_rate'],data.loc['Michigan','chg_unemp_rate'],\n",
    "           facecolors='none',edgecolors='blue',marker='s',label='Michigan')\n",
    "ax.spines['top'].set_visible(False)\n",
    "ax.spines['right'].set_visible(False)\n",
    "plt.legend(loc='upper right')\n",
    "plt.title(\"Okun's Law in Wisconsin and Michigan\")\n",
    "plt.xlabel(\"GDP growth rate\")\n",
    "plt.ylabel(\"Change in the unemployment rate\")\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "celltoolbar": "Attachments",
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
